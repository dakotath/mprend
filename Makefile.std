# Output related
ifndef PLAT
$(error PLAT is not set, this is not meant to be called directly!)
endif

# Compiler and flags
CC = gcc
CFLAGS = -Wall -Wextra -O2 -Iinclude -DPLATFORM_$(PLAT)

# Directories
CORE_DIR = core
PLAT_DIR = plat/$(PLAT)
BUILD_DIR = build_$(PLAT)
LIB_DIR = lib/$(PLAT)

# Create build and lib directories if they don't exist
$(shell mkdir -p $(BUILD_DIR))
$(shell mkdir -p $(LIB_DIR))

# Find all source files in core and plat/$(PLAT)
CORE_SOURCES = $(wildcard $(CORE_DIR)/*.c)
PLAT_SOURCES = $(wildcard $(PLAT_DIR)/*.c)

# Combine all sources
SOURCES = $(CORE_SOURCES) $(PLAT_SOURCES)

# Object files in the build directory
OBJECTS = $(patsubst %.c,$(BUILD_DIR)/%.o,$(SOURCES))

# Static library
LIBRARY = $(LIB_DIR)/libmprend.a

# Static library
LIBRARY = $(LIB_DIR)/libmprend.a

# Default target
all: $(LIBRARY)

# Create static library from object files
$(LIBRARY): $(OBJECTS)
	ar rcs $@ $(OBJECTS)

# Rule to compile .c files into .o files
# Ensure directory exists before creating .o files
$(BUILD_DIR)/%.o: %.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# Clean target
clean:
	rm -rf $(BUILD_DIR) $(LIB_DIR)

.PHONY: all clean